package cn.dbdj1201.cos.cap5;

/**
 * @author yz1201
 * @date 2020-06-20 18:16
 **/
public class Base {
    /*  volatile 如何保证可见性
        JVM层面    读写屏障：

                读屏障： 保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据。
                写屏障： 保证在该屏障之前，对共享变量的改动，都同步到主存中。

                如何保证有序性

                写屏障会确保指令重排时，不会将写屏障之前的代码写在写屏障之后
                读屏障会确保指令重排时，不会将读屏障之后的代码排在读屏障之前

                但volatile 不能解决指令交错
                写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证跑到他前边去
                而有序性的保证也只是保证了本线程内相关代码不被重排序
           happens-before原则，
                1.加锁线程对共享变量的操作对后续线程可见
                2.volatile修饰过的变量可见
                3.线程start前对变量的写，在该线程开始后对该变量可见
                4.线程结束前对变量的写，对其他线程得知他结束后的读可见，比如其他线程用t1.Alive() 或者t1.join()等
               待他结束。
                5.线程t1打断t2前对变量的写，对于其他线程得知t2被打断后对变量的读可见(通过t2.interrupted或者t2.isInterrupted)
                6.对变量默认值(0,false,null)的写，对其他线程对该变量的读可见
*/
}
