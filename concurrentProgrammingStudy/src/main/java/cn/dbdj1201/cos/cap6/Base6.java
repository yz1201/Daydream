package cn.dbdj1201.cos.cap6;

/**
 * @author yz1201
 * @date 2020-06-21 18:37
 **/
public class Base6 {
    /*
    CAS compare and swap 比较交换与 Volatile
        CAS底层用了lock cmpchg指令（x86架构），在单核CPU和多核CPU下都能够保证【比较-交换】的原子性
            在多核状态下，某个核执行到带lock的指令时，cpu会让总线锁住，当这个核把此指令执行完毕，再开启总线。这个过程中不会被线程的调度机制打断，
        保证了多个线程对内存操作的准确性，是原子的。

    CAS 特点：
        结合CAS 和 volatile 可以实现无锁并发，适用于线程数少，多核cpu的场景下
            cas是基于乐观锁的思想，最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃点亏重新试试
            synchronized 是基于悲观锁的思想，最悲观的估计，得防着其他线程来修改共享变量，我上了锁你们都别想改，我完事解锁了别人才有机会。
        CAS体现的是无锁并发，无阻塞并发
            因为没有使用synchronized，所以线程不会陷入阻塞，这是效率提升的原因之一。
            但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响。

    */
}
